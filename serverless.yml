service: team-3-etl

frameworkVersion: '2'


provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221

  region: eu-west-1

  iam:
    role: arn:aws:iam::883232869702:role/data-lambda-role 

functions:
  service: #renamed lambda-service as service
    handler: handler.handle
    timeout: 300 
    layers: 
      - !Ref PythonRequirementsLambdaLayer
    events:
      - s3:
          bucket: gen-x1-team-3-data-in
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - suffix: .csv
    vpc:
      securityGroupIds:
        - sg-0801321c71a7a6e23
      subnetIds:
        - subnet-004b25850753cd6e2
        - subnet-0ee5935030b8a9e95
        - subnet-012a9e4b86ac75aa9

package:
  individually: true
  include: 
    - src/**
    - handler.py
  exclude:
    - "*"
    - "*/**"
  excludeDevDependencies: false

plugins:
  - serverless-python-requirements
  - serverless-iam-roles-per-function

custom:
  pythonRequirements:
    slim: true
    layer: true
    pythonBin: python3
    dockerizePip: true
      # useStaticCache: false
    useDownloadCache: false
  enterprise:
    collectLambdaLogs: false

resources:
  Resources:
    IamRoleCustomResourcesLambdaExecution:
      Type: AWS::IAM::Role
      Properties:
        PermissionsBoundary: arn:aws:iam::883232869702:policy/ScopePermissions
        AssumeRolePolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Principal:
                    Service:
                      - lambda.amazonaws.com
                  Action: sts:AssumeRole

